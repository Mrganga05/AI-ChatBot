// src/contexts/ChatContext.tsx

import React, { createContext, useContext, useState, ReactNode, useCallback } from 'react';
// Assuming conversationAPI and chatAPI from '../services/api' are configured to talk to your backend
import { conversationAPI, chatAPI } from '../services/api'; 

// --- Interface Definitions (Keep as is) ---
interface Message {
Â  id?: number;
Â  role: 'user' | 'assistant';
Â  content: string;
Â  created_at?: string;
}

interface Conversation {
Â  id: number;
Â  title: string;
Â  created_at: string;
Â  updated_at: string;
Â  message_count?: number;
Â  last_message?: string;
}

// --- ChatContextType ---
interface ChatContextType {
Â  conversations: Conversation[];
Â  currentConversation: Conversation | null;
Â  messages: Message[];
Â  loading: boolean;
Â  
Â  activeChatId: number | string | null; 

Â  loadConversations: () => Promise<void>;
Â  loadConversation: (id: number) => Promise<void>;
Â  createConversation: (title?: string) => Promise<number | undefined>; // Updated return type for consistency
Â  sendMessage: (message: string, conversationId?: number) => Promise<void>;
Â  deleteConversation: (id: number) => Promise<void>;
Â  updateConversationTitle: (id: number, title: string) => Promise<void>;
Â  clearCurrentConversation: () => void;
}

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export const useChat = () => {
Â  const ctx = useContext(ChatContext);
Â  if (!ctx) throw new Error("useChat must be used within ChatProvider");
Â  return ctx;
};

export const ChatProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
Â  const [conversations, setConversations] = useState<Conversation[]>([]);
Â  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null);
Â  const [messages, setMessages] = useState<Message[]>([]);
Â  const [loading, setLoading] = useState(false);

Â  // --- API Functions (Using useCallback is ideal here) ---

Â  const loadConversations = useCallback(async () => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const data = await conversationAPI.getAll();
Â  Â  Â  setConversations(data.conversations ?? data); 
Â  Â  } catch (e) { 
        console.error("Error loading conversations:", e); 
    } finally {
Â  Â  Â  setLoading(false);
    }
Â  }, []);

Â  const loadConversation = useCallback(async (id: number) => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const data = await conversationAPI.getById(id);
Â  Â  Â  // Assuming data contains { conversation: Conversation, messages: Message[] }
Â  Â  Â  setCurrentConversation(data.conversation ?? data); 
Â  Â  Â  setMessages(data.messages ?? []);
Â  Â  } catch (e) { 
        console.error(`Error loading conversation ${id}:`, e); 
    } finally {
Â  Â  Â  setLoading(false);
    }
Â  }, []);

  // ðŸš¨ REFINED: Now returns number | undefined for error handling in ChatLayout
Â  const createConversation = useCallback(async (title = "New chat") => {
Â  Â  try {
Â  Â  Â  const data = await conversationAPI.create(title);
Â  Â  Â  const conv: Conversation = data.conversation ?? data;
Â  Â  Â  setConversations(prev => [conv, ...prev]);
Â  Â  Â  setCurrentConversation(conv);
Â  Â  Â  setMessages([]); // Clear messages for a truly new chat
Â  Â  Â  return conv.id;
Â  Â  } catch (e) {
Â  Â  Â  console.error("Error creating new conversation:", e);
Â  Â  Â  return undefined;
Â  Â  }
Â  }, []);

Â  // ðŸš€ CORE GROQ API CONNECTION LOGIC via chatAPI.sendMessage
Â  const sendMessage = useCallback(async (message: string, conversationId?: number) => {
Â  Â  // 1. Optimistic Update: Add user message and start loading
Â  Â  const userMsg: Message = { 
        role: "user", 
        content: message, 
        created_at: new Date().toISOString() 
    };
Â  Â  setMessages(prev => [...prev, userMsg]);
    setLoading(true); // ðŸš¨ START LOADING SPINNER

Â  Â  try {
        // 2. Call the backend API (which integrates with Groq)
Â  Â  Â  Â  // res will contain { message: string, conversationId?: number } (from backend)
Â  Â  Â  Â  const res = await chatAPI.sendMessage(message, conversationId);
        
        // 3. Update state with AI message
Â  Â  Â  Â  const aiMsg: Message = { 
            role: "assistant", 
            content: res.message ?? res.reply ?? res.data ?? "", // Adjust based on your backend structure
            created_at: new Date().toISOString() 
        };
Â  Â  Â  Â  setMessages(prev => [...prev, aiMsg]);
Â  Â  Â  
Â  Â  Â  Â  // 4. Handle New Conversation Flow (Only on first message)
Â  Â  Â  Â  if (!conversationId && res.conversationId) {
            // Fetch the full new conversation object from the backend 
            // (needed for title/metadata)
Â  Â  Â  Â  Â  Â  const data = await conversationAPI.getById(res.conversationId);
Â  Â  Â  Â  Â  Â  const conv: Conversation = data.conversation ?? data;
            
Â  Â  Â  Â  Â  Â  // Set the current conversation and refresh the sidebar list
Â  Â  Â  Â  Â  Â  setCurrentConversation(conv);
Â  Â  Â  Â  Â  Â  await loadConversations(); // Updates the left sidebar with the new chat
Â  Â  Â  Â  }

Â  Â  } catch (e) {
Â  Â  Â  Â  console.error("Error sending message to Groq API via backend:", e);
Â  Â  Â  Â  // Remove the user message added in step 1 on error
Â  Â  Â  Â  setMessages(prev => prev.filter(msg => msg !== userMsg)); 
Â  Â  } finally {
        setLoading(false); // ðŸš¨ STOP LOADING SPINNER
    }
Â  }, [loadConversations]);

Â  const deleteConversation = useCallback(async (id: number) => {
Â  Â  try {
Â  Â  Â  await conversationAPI.delete(id);
Â  Â  Â  setConversations(prev => prev.filter(c => c.id !== id));
Â  Â  Â  if (currentConversation?.id === id) { setCurrentConversation(null); setMessages([]); }
Â  Â  } catch (e) { console.error("Error deleting conversation:", e); }
Â  }, [currentConversation?.id]);

Â  const updateConversationTitle = useCallback(async (id: number, title: string) => {
Â  Â  try {
Â  Â  Â  await conversationAPI.updateTitle(id, title);
Â  Â  Â  setConversations(prev => prev.map(c => (c.id === id ? { ...c, title } : c)));
Â  Â  Â  if (currentConversation?.id === id) setCurrentConversation({ ...currentConversation, title } as Conversation);
Â  Â  } catch (e) { console.error("Error updating title:", e); }
Â  }, [currentConversation]);

Â  const clearCurrentConversation = useCallback(() => { setCurrentConversation(null); setMessages([]); }, []);

Â  // --- Context Value ---
Â  const value: ChatContextType = {
Â  Â  conversations, 
Â  Â  currentConversation, 
Â  Â  messages, 
Â  Â  loading,
Â  Â  activeChatId: currentConversation?.id ?? null, 

Â  Â  loadConversations, 
Â  Â  loadConversation, 
Â  Â  createConversation, 
Â  Â  sendMessage, 
Â  Â  deleteConversation,
Â  Â  updateConversationTitle, 
Â  Â  clearCurrentConversation
Â  };

Â  return (
Â  Â  <ChatContext.Provider value={value}>
Â  Â  Â  {children}
Â  Â  </ChatContext.Provider>
Â  );
};